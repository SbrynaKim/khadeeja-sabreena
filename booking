import java.awt.*;
import java.awt.event.*;
import javax.swing.*;
import java.util.ArrayList;
import java.io.*;
import java.awt.Window.Type;

public class booking extends JFrame implements ActionListener
{
 JTextField seat, totalcost;
 Choice movie, type, row, time; // Choices for the GUI
 JLabel lblmovie, lbltype, lblrow, lbltime, lblbl, mblbl, rblbl, lblseat, lbltotalprice, title;
 JButton submitbut, showbut, paybut, receiptbut;
 String selectedtime, total, selectedseat, selectedblock, tickettype;
 int timechoice, convertedseat1, convertedseat2, totalprice;
 int totaltickets = 0, currenti;

 Seat midside1[][] = new Seat [4] [4];
 Seat rightside1[][] = new Seat [4] [4]; // Each one of these creates an array for each block

 Seat midside3[][] = new Seat [4] [4];
 Seat rightside3[][] = new Seat [4] [4];

 Seat midside5[][] = new Seat [4] [4];
 Seat rightside5[][] = new Seat [4] [4];

 Seat midside7[][] = new Seat [4] [4];
 Seat rightside7[][] = new Seat [4] [4];

 Seat midside9[][] = new Seat [4] [4];
 Seat rightside9[][] = new Seat [4] [4];

 Ticket tickets[] = new Ticket[30]; //Array for storing the tickets booked

 public booking()
 {
  setBackground(Color.WHITE);
  getContentPane().setForeground(Color.BLACK);
  setTitle("AURUM CINEMA booking");
  setSize(678,410);
  setLocation(200,200);
  setResizable(false);
  title.setBounds(7, 21, -1, -1);
  lblmovie = new JLabel("Movie: ");
  lblmovie.setFont(new Font("Times New Roman", Font.BOLD, 20));
  lblmovie.setBounds(7, 11, 68, 24);
  movie = new Choice();
  movie.setForeground(Color.BLACK);
  movie.setBackground(Color.WHITE);
  movie.setBounds(77, 14, 230, 22);
  movie.add("m1");
  movie.add("m2");
  movie.add("m3");
  lbltype = new JLabel("Ticket Type: ");
  lbltype.setBounds(7, 85, 115, 24);
  lbltype.setFont(new Font("Times New Roman", Font.BOLD, 20));
  type = new Choice();
  type.setBounds(141, 116, 84, 20);
  type.add("Adult");
  type.add("Child");
  lblrow = new JLabel("Row:");
  lblrow.setBounds(7, 156, 56, 20);
  lblrow.setFont(new Font("Times New Roman", Font.BOLD, 20));
  row = new Choice();
  row.setBounds(63, 156, 97, 20);
  row.add("Middle Block");
  row.add("Right Block");
  lbltime = new JLabel("Time: ");
  lbltime.setBounds(7, 54, 56, 20);
  lbltime.setFont(new Font("Times New Roman", Font.BOLD, 20));
  time = new Choice();
  time.setBounds(63, 54, 78, 20);
  time.add("10:00");
  time.add("15:00");
  time.add("17:00");
  time.add("19:00");
  time.add("21:00");
  paybut = new JButton("Pay");
  paybut.setBounds(7, 337, 63, 23);
  paybut.setBackground(Color.white);
  lblseat = new JLabel ("Enter Seat Number: ");
  lblseat.setBounds(7, 193, 184, 28);
  lblseat.setFont(new Font("Times New Roman", Font.BOLD, 20));
  seat = new JTextField(2);
  seat.setBounds(7, 219, 48, 32);
  seat.setFont(new Font("Verdana", Font.BOLD, 20));
  seat.setHorizontalAlignment(seat.CENTER);
  lbltotalprice = new JLabel ("Total Price: ");
  lbltotalprice.setBounds(7, 262, 115, 28);
  lbltotalprice.setFont(new Font("Times New Roman", Font.BOLD, 20));
  totalcost = new JTextField(7);
  totalcost.setBounds(7, 291, 140, 24);
  totalcost.setFont(new Font("Times New Roman", Font.BOLD, 20));
  totalcost.setHorizontalAlignment(totalcost.CENTER);
  totalcost.setEditable(false);
  submitbut = new JButton("Submit");
  submitbut.setBounds(63, 228, 78, 23);
  submitbut.setBackground(Color.white);
  showbut = new JButton("Show");
  showbut.setBounds(147, 54, 78, 23);
  showbut.setBackground(Color.white);

  /* The following declarations
  Initialize the variables for
  the positions of the blocks */

  int xmid = 0;
  int ymid = 0;
  int xright = 0;
  int yright = 0;

  xmid = 220;
  ymid = 230; //Initial positions
  int totalmidside1 = 0; //'Total' is the total and is used to label the seats
  for (int i = 0; i < midside1.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    midside1[i][j]=new Seat(totalmidside1, 0, xmid, ymid);
    xmid += 50; //Moving the next seat along the x position by 50
    totalmidside1 ++; //Adding one to the total for the next seat
   }
   xmid = 220; //Moving back to the left for the next row
   ymid += 30;  //Moving down for the next row
  }

  xright = 440;
  yright = 230; //Initial positions
  int totalrightside1 = 0; //'Total' is the total and is used to label the seats
  for (int i = 0; i < rightside1.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    rightside1[i][j]=new Seat(totalrightside1, 0, xright, yright);
    xright += 50; //Moving the next seat along the x position by 50
    totalrightside1 ++; //Adding one to the total for the next seat
   }
   xright = 440; //Moving back to the left for the next row
   yright += 30; //Moving down for the next row
  }

  /* The next lines of code perform the same processes as the ones before such as positions for each block */

  xmid = 300;
  ymid = 310;
  int totalmidside3 = 0;
  for (int i = 0; i < midside3.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    midside3[i][j]=new Seat(totalmidside3, 0, xmid, ymid);
    xmid += 50;
    totalmidside3 ++;
   }
   xmid = 300;
   ymid += 30;
  }

  xright = 550;
  yright = 310;
  int totalrightside3 = 0;
  for (int i = 0; i < rightside3.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    rightside3[i][j]=new Seat(totalrightside3, 0, xright, yright);
    xright += 50;
    totalrightside3 ++;
   }
   xright = 550;
   yright += 30;
  }

  xmid = 300;
  ymid = 310;
  int totalmidside5 = 0;
  for (int i = 0; i < midside5.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    midside5[i][j]=new Seat(totalmidside5, 0, xmid, ymid);
    xmid += 50;
    totalmidside5 ++;
   }
   xmid = 300;
   ymid += 30;
  }

  xright = 550;
  yright = 310;
  int totalrightside5 = 0;
  for (int i = 0; i < rightside5.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    rightside5[i][j]=new Seat(totalrightside5, 0, xright, yright);
    xright += 50;
    totalrightside5 ++;
   }
   xright = 550;
   yright += 30;
  }

  xmid = 300;
  ymid = 310;
  int totalmidside7 = 0;
  for (int i = 0; i < midside7.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    midside7[i][j]=new Seat(totalmidside7, 0, xmid, ymid);
    xmid += 50;
    totalmidside7 ++;
   }
   xmid = 300;
   ymid += 30;
  }

  xright = 550;
  yright = 310;
  int totalrightside7 = 0;
  for (int i = 0; i < rightside7.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    rightside7[i][j]=new Seat(totalrightside7, 0, xright, yright);
    xright += 50;
    totalrightside7 ++;
   }
   xright = 550;
   yright += 30;
  }

  xmid = 300;
  ymid = 310;
  int totalmidside9 = 0;
  for (int i = 0; i < midside9.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    midside9[i][j]=new Seat(totalmidside9, 0, xmid, ymid);
    xmid += 50;
    totalmidside9 ++;
   }
   xmid = 300;
   ymid += 30;
  }

  xright = 550;
  yright = 310;
  int totalrightside9 = 0;
  for (int i = 0; i < rightside9.length; i++)
  {
   for (int j = 0; j < 4; j++)
   {
    rightside9[i][j]=new Seat(totalrightside9, 0, xright, yright);
    xright += 50;
    totalrightside9 ++;
   }
   xright = 550;
   yright += 30;
  }
  
  /* Adding the labels and text boxes to the screen */
  getContentPane().setLayout(null);

  getContentPane().add(title);
  getContentPane().add(lblmovie);
  getContentPane().add(movie);
  getContentPane().add(lbltype);
  getContentPane().add(type);
  getContentPane().add(row);
  getContentPane().add(lbltime);
  getContentPane().add(time);
  getContentPane().add(showbut);
  getContentPane().add(lblseat);
  getContentPane().add(seat);
  getContentPane().add(submitbut);
  getContentPane().add(lblrow);
  getContentPane().add(lbltotalprice);
  getContentPane().add(totalcost);
  getContentPane().add(paybut);
  setVisible(true);
  setDefaultCloseOperation(EXIT_ON_CLOSE);
  getContentPane().setBackground(new Color(248, 248, 255));
  
  JRadioButton rdbtnNewadult = new JRadioButton("Adult");
  rdbtnNewadult.setBounds(7, 116, 56, 23);
  getContentPane().add(rdbtnNewadult);
  
  JRadioButton rdbtnNewchild = new JRadioButton("Child");
  rdbtnNewchild.setBounds(66, 116, 56, 23);
  getContentPane().add(rdbtnNewchild);

  submitbut.addActionListener(this);
  showbut.addActionListener(this); //Action listener for each individual button
  paybut.addActionListener(this);
 }
 public void paint(Graphics graf)
 {
  super.paint(graf);

  switch(timechoice)
  {
   case 1:
    for (int i = 0; i < midside1.length; i++) //Looping throw the left side at 1 block - gives initial size
    {
     for (int j = 0; j < 4; j++) //Looping through each row fully
     {
      midside1[i][j].display(graf); //Displaying the mid side @ 1
      rightside1[i][j].display(graf); //Displaying the right side @ 1
     }
    }
    break;
   case 3:
    for (int i = 0; i < midside3.length; i++) //Looping through the left side at 3 block - gives initial size
    {
     for (int j = 0; j < 4; j++) //Looping through each row fully
     {
      midside3[i][j].display(graf); //Displaying the mid side @ 3
      rightside3[i][j].display(graf); //Displaying the right side @ 3
     }
    }
    break;
   case 5:
    for (int i = 0; i < midside5.length; i++) //Looping through the left side at 5 block - gives initial size
    {
     for (int j = 0; j < 4; j++) //Looping through each row fully
     {
      midside5[i][j].display(graf); //Displaying the mid side @ 5
      rightside5[i][j].display(graf); //Displaying the right side @ 5
     }
    }
    break;
   case 7:
    for (int i = 0; i < midside7.length; i++) //Looping through the left side at 7 block - gives initial size
    {
     for (int j = 0; j < 4; j++) //Looping through each row fully
     {
      midside7[i][j].display(graf); //Displaying the mid side @ 7
      rightside7[i][j].display(graf); //Displaying the right side @ 7
     }
    }
    break;
   case 9:
    for (int i = 0; i < midside9.length; i++) //Looping through the leftside at 7 block - gives initial size
    {
     for (int j = 0; j < 4; j++) //Looping through each row fully
     { 
      midside9[i][j].display(graf); //Displaying the mid side @ 7
      rightside9[i][j].display(graf); //Displaying the right side @ 7
     }
    }
    break;
   default:
   /* Used as what appears when the program starts */
    for (int i = 0; i < midside1.length; i++) //Looping through the left side at 1 block - gives initial size
    {
        for (int j = 0; j < 4; j++) //Looping through each row fully
        {
         midside1[i][j].display(graf); //Displaying the mid side @ 1
         rightside1[i][j].display(graf); //Displaying the right side @ 1
        }
       }
       break;
     }
    }
    public void actionPerformed(ActionEvent ev)
    {
     selectedblock = row.getSelectedItem(); //The values needed to book seats and check for availability taken from text boxes
     selectedtime = time.getSelectedItem();
     tickettype = type.getSelectedItem();

     if (ev.getSource() == submitbut)
     {
      selectedseat = seat.getText();
      int selectseat = Integer.parseInt(selectedseat); //Getting the seat number and converting it to an integer

      /* The following set of if statements checks for seat number and converts it
      to an X, Y position which can be used for booking */

      if (selectseat == 0)
       {convertedseat1 = 0;
       convertedseat2 = 0;}
      if (selectseat == 1)
       {convertedseat1 = 0;
       convertedseat2 = 1;}
      if (selectseat == 2)
       {convertedseat1 = 0;
       convertedseat2 = 2;}
      if (selectseat == 3)
       {convertedseat1 = 0;
       convertedseat2 = 3;}
      if (selectseat == 4)
       {convertedseat1 = 1;
       convertedseat2 = 0;}
      if (selectseat == 5)
       {convertedseat1 = 1;
       convertedseat2 = 1;}
      if (selectseat == 6)
       {convertedseat1 = 1;
       convertedseat2 = 2;}
      if (selectseat == 7)
       {convertedseat1 = 1;
       convertedseat2 = 3;}
      if (selectseat == 8)
       {convertedseat1 = 2;
       convertedseat2 = 0;}
      if (selectseat == 9)
       {convertedseat1 =2;
       convertedseat2 = 1;}
      if (selectseat == 10)
       {convertedseat1 = 2;
       convertedseat2 = 2;}
      if (selectseat == 11)
       {convertedseat1 = 2;
       convertedseat2 = 3;}
      if (selectseat == 12)
       {convertedseat1 = 3;
       convertedseat2 = 0;}
      if (selectseat == 13)
       {convertedseat1 = 3;
       convertedseat2 = 1;}
      if (selectseat == 14)
       {convertedseat1 = 3;
       convertedseat2 = 2;}
      if (selectseat == 15)
       {convertedseat1 = 3;
       convertedseat2 = 3;}


       if (selectedtime == "10:00") //If they are trying to book a ticket a 1 o'clock
       {
       timechoice = 1;
       repaint();
       if (selectedblock == "Middle Block")  // If they are trying to book a seat in the middle block
       {
        int iftaken = midside1[convertedseat1][convertedseat2].isTaken(); //Uses the is taken() method to see if it is taken
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked"); //Seat is taken and outputs an error message
        }
        else if (iftaken == 0)
        {
         midside1[convertedseat1][convertedseat2].setSeat(); //Sets the seat to booked
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime); //Creates a new ticket objects in the tickets array
         int tempprice = tickets[totaltickets].getSeatPrice();  //Gets the seat price using the getSeatPrice() method
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice)); //Updates and adds to the text box
         totaltickets += 1; //Updates the total amount of tickets booked
         seat.setText("");
        }
       }
       if (selectedblock == "Right Block")  // If they are trying to book a seat in the right block
       {
        int iftaken = rightside1[convertedseat1][convertedseat2].isTaken(); //Uses the is taken() method to see if it is taken
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");  //Seat is taken and outputs an error message
        }
        else if (iftaken == 0)
        {
         rightside1[convertedseat1][convertedseat2].setSeat(); //Sets the seat to booked
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);  //Creates a new ticket objects in the tickets array
         int tempprice = tickets[totaltickets].getSeatPrice(); //Gets the seat price using the getSeatPrice() method
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice)); //Updates and adds to the text box
         totaltickets += 1; //Updates the total amount of tickets booked
         seat.setText("");
        }
       }
      }

      /* Code is replicated for each of the times the user wants to book*/

      if (selectedtime == "15:00")
      {
       timechoice = 3;
       repaint();

       if (selectedblock == "Middle Block")
       {
        int iftaken = midside3[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         midside3[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
       if (selectedblock == "Right Block")
       {
        int iftaken = rightside3[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         rightside3[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }

      }
      if (selectedtime == "17:00")
      {
       timechoice = 5;
       repaint();

       if (selectedblock == "Middle Block")
       {
        int iftaken = midside5[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         midside5[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
       if (selectedblock == "Right Block")
       {
        int iftaken = rightside5[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         rightside5[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
      }
      if (selectedtime == "19:00")
      {
       timechoice = 7;
       repaint();

       if (selectedblock == "Middle Block")
       {
        int iftaken = midside7[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         midside7[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
       if (selectedblock == "Right Block")
       {
        int iftaken = rightside7[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         rightside7[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
      }
      if (selectedtime == "21:00")
      {
       timechoice = 9;
       repaint();
       if (selectedblock == "Middle Block")
       {
        int iftaken = midside9[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         midside9[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
       if (selectedblock == "Right Block")
       {
        int iftaken = rightside9[convertedseat1][convertedseat2].isTaken();
        if (iftaken == 1)
        {
         JOptionPane.showMessageDialog(null, "This seat is taken and cannot be booked");
        }
        else if (iftaken == 0)
        {
         rightside9[convertedseat1][convertedseat2].setSeat();
         repaint();
         tickets[totaltickets] = new Ticket(tickettype, selectseat, selectedblock, selectedtime);
         int tempprice = tickets[totaltickets].getSeatPrice();
         totalprice = totalprice + tempprice;
         totalcost.setText("RM "+ Integer.toString(totalprice));
         totaltickets += 1;
         seat.setText("");
        }
       }
      }
     }
     if (ev.getSource() == showbut)
     {
      /* If the user has clicked the show button it sets a variable and then repaints the desired time */

      if (selectedtime == "10:00")
      {
       timechoice = 1;
       repaint();
      }
      if (selectedtime == "15:00")
      {
       timechoice = 3;
       repaint();
      }
      if (selectedtime == "17:00")
      {
       timechoice = 5;
       repaint();
      }
      if (selectedtime == "19:00")
      {
       timechoice = 7;
       repaint();
      }
      if(selectedtime == "21:00")
      {
       timechoice = 9;
       repaint();
      }

     }
     if (ev.getSource() == paybut) //Pay button to generate tickets
     {

         try{
          FileWriter stream= new FileWriter("tickets.txt"); //Opening the tickets.txt file
          BufferedWriter output = new BufferedWriter(stream);

        for (int i = 0; i < totaltickets; i++) //Looping through the number of tickets booked
        {
           /* Getting the variables needed from methods related to the object */
         String movietype = tickets[i].getMovie();
         int ticketnum = tickets[i].getSeatNum();
         int ticketprice = tickets[i].getSeatPrice();
         String tickettype = tickets[i].getType();
         String tickettime = tickets[i].getTime();
         String ticketblock = tickets[i].getBlock();
         String newline = System.getProperty("line.separator");
         
         output.write(newline);
         output.write("--------Ticket Details--------");
         output.write(newline);
         output.write("------------------------------");
         output.write(newline);
         output.write(newline);
         output.write("Movie name: " + movietype);
         output.write(newline);
         output.write("Ticket Number: " + ticketnum); //Writing ticket num
         output.write(newline);
         output.write("Ticket Price: " + ticketprice);
         output.write(newline);
         output.write("Ticket Type: " + tickettype);
         output.write(newline);
         output.write("Ticket Time: " + tickettime);
         output.write(newline);
         output.write("Ticket Block: " + ticketblock);
         output.write(newline);
         output.write("----------Thank You----------");
         output.write(newline);
        }
        output.close();
        
        //EXEPTION HANDLING
          }catch (Exception e){//Catch exception if any
          System.err.println("Error: " + e.getMessage());}
         JOptionPane.showMessageDialog(null, "These tickets have been printed out to the file 'tickets.txt'"); //Success message

         for(int i=0; i < tickets.length; i++)
         {
        tickets[i] = null; //Setting the tickets array values to null so new tickets can be booked
       }
       totaltickets = 0; //Resets total tickets to 0
       totalprice = 0; //Resets total price to 0
       totalcost.setText(""); //Sets total cost to an empty text field
       seat.setText(""); //Wipes seat number text field
     }
    }
    public static void main(String [] args)
    {
     new booking();
    }
   }
   class Seat
   {
    private final int boxheight = 30; //Height of the drawn text box
    private final int boxwidth = 50; //Width of the drawn text box
    private int seatnumber;
    private int seattaken;
    private int x;
    private int y;

    public Seat(int number, int taken, int xstart, int ystart)
    {
     seatnumber = number; //Setting the seat number
     seattaken = taken; //Setting whether it is taken
     x = xstart; //Display position
     y = ystart;
    }
    
	public void display(Graphics graf)
    {
     int xdraw, ydraw;
     switch (seattaken)
     {
     case 0:
      xdraw = x +  boxwidth;
      ydraw = y +  boxheight;
      graf.drawRect(x,y,boxwidth,boxheight);
      graf.drawString(Integer.toString(seatnumber),x+20,y+boxheight*3/4); //Painting the seat with the seat number printed inside
      break;
     case 1:
      xdraw = x +  boxwidth;
      ydraw = y +  boxheight;
      graf.drawRect(x,y,boxwidth,boxheight);
      String msg = "X";
      graf.drawString(msg,x+20,y+boxheight*3/4); //Painting the seat with X printed inside
      break;
     default:
      break;
     }

    }
    public int isTaken()
    {
     return seattaken;
    }
    public void setSeat()
    {
     seattaken = 1;
    }
   }
   class Ticket
   {
	private String movie;
    private int price;
    private String tickettype;
    private int seatnum;
    private String timeticket;
    private String blockticket;


    public Ticket (String type, int seatnumber, String block, String time)
    {
     seatnum = seatnumber; //Setting tickets seat number
     tickettype = type; //Setting ticket type
     blockticket = block; //Setting block
     timeticket = time; //Setting time

     if (blockticket == "Middle Block")
     {

      if (type == "Adult")
      {
       price = 20; //Setting adult price
      }
      if (type == "Child")
      {
       price = 15;  //Setting child price
      }
     }

     if (blockticket == "Right Block")
     {

      if (type == "Adult")
      {
       price = 20; //Setting adult price
      }
      if (type == "Child")
      {
       price = 15;  //Setting child price
      }
     }
    }
    /* The following get methods are used to print tickets */
    public String getMovie()
    {
    	return movie;
    }
    public int getSeatPrice()
    {
     return price;
    }
    public String getTime()
    {
     return timeticket;
    }
    public String getBlock()
    {
     return blockticket;
    }
    public String getType()
    {
     return tickettype;
    }
    public int getSeatNum()
    {
     return seatnum;
   }
}
